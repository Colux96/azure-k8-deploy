---
# tasks file for kubernetes_node
- name: Install required packages
  apt:
    name:
      - curl
      - gnupg2
      - software-properties-common
      - apt-transport-https
      - ca-certificates
    state: present
    update_cache: true

- name: Install Docker
  apt:
    name: docker.io
    state: present
    update_cache: true

- name: Ensure Docker is started and enabled
  systemd:
    name: docker
    state: started
    enabled: true

- name: Ensure /etc/apt/keyrings directory exists
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Remove Existing Kubernetes Directory (if it exists)
  file:
    path: /etc/apt/sources.list.d/pkgs_k8s_io_core_stable_v{{ kubernetes_version }}_deb.list
    state: absent

- name: Check if swap is enabled
  command: swapon --summary
  register: swap_status
  changed_when: false

- name: Disable swap if enabled
  command: swapoff -a
  when: swap_status.stdout_lines | length > 0
  changed_when: swap_status.stdout_lines | length > 0

- name: Disable SWAP in fstab
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: Add kernel modules for Containerd
  copy:
    dest: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter
    mode: '0644'

- name: Load kernel modules for Containerd
  modprobe:
    name: "{{ item }}"
  loop:
    - overlay
    - br_netfilter

- name: Add kernel parameters for Kubernetes
  copy:
    dest: /etc/sysctl.d/kubernetes.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
    mode: '0644'
  notify:
    - Reload sysctl

- name: Configuring Containerd (building the configuration file)
  command:
    cmd: sh -c "containerd config default > /opt/containerd/config.toml"
  args:
    creates: /opt/containerd/config.toml

- name: Configuring Containerd (Setting SystemdCgroup Variable to True)
  lineinfile:
    path: /opt/containerd/config.toml
    regexp: '^SystemdCgroup = false'
    line: 'SystemdCgroup = true'
  notify:
    - Restart containerd service

- name: Ensure UFW is started and enabled
  systemd:
    name: ufw
    state: started
    enabled: true

- name: Enable the firewall
  ufw:
    state: enabled

- name: Allow required ports through firewall
  ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  loop:
    - {port: 22, proto: tcp}
    - {port: 6443, proto: tcp}
    - {port: 2379:2380, proto: tcp}
    - {port: 8080, proto: tcp}
    - {port: 10250, proto: tcp}
    - {port: 10251, proto: tcp}
    - {port: 10252, proto: tcp}
    - {port: 10255, proto: tcp}
    - {port: 30080, proto: tcp}
    - {port: 30880, proto: tcp}

- name: Download Kubernetes GPG key
  get_url:
    url: https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key
    dest: /tmp/kubernetes-release.key

- name: Convert Kubernetes GPG key to keyring format
  command:
    cmd: >
      gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-release.key
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Add Kubernetes APT repository
  apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /"
    state: present

- name: Install Kubernetes components
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: true

- name: Hold kubelet, kubeadm, kubectl packages
  command:
    cmd: apt-mark hold "{{ item }}"
  loop:
    - kubelet
    - kubeadm
    - kubectl
  changed_when: false

- name: Ensure kubelet is started and enabled
  systemd:
    name: kubelet
    state: started
    enabled: true

- name: Replace /etc/default/kubelet contents
  copy:
    dest: /etc/default/kubelet
    content: 'KUBELET_EXTRA_ARGS="--cgroup-driver=cgroupfs"'
    mode: '0644'
  notify:
    - Restart kubelet service
